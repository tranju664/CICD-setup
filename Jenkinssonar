pipeline {
    agent any
    environment {
        AWS_ACCESS_KEY_ID     = credentials('aws-access-key-id')
        AWS_SECRET_ACCESS_KEY = credentials('aws-secret-access-key')
        AWS_DEFAULT_REGION    = 'ap-south-1'
    }
    stages {
        stage('Scanning Stage') {
            agent {
                label 'sonar' // Runs on the SonarQube agent
            }
            steps {
             withSonarQubeEnv('spring') { 
                    sh "mvn clean verify sonar:sonar -Dsonar.projectKey=Spring"
                } 
             }
          }
        stage('Build Stage') {
            agent {
                label 'master' // Runs on the Jenkisn Master Node
            }
            steps {
                sh 'mvn clean install'
            }
            post {
                success {
                    script {
                        def server = Artifactory.newServer(url: 'http://13.127.149.162:8081/artifactory/', credentialsId: 'jfrog')
                        def rtMaven = Artifactory.newMavenBuild()
                        //rtMaven.deployer server: server, releaseRepo: 'libs-release/', snapshotRepo: 'libs-snapshot/'
                        rtMaven.deployer server: server, releaseRepo: 'sagar', snapshotRepo: 'sagar'
                        rtMaven.tool = 'maven'
                        rtMaven.run(pom: 'pom.xml', goals: 'clean install')
                    }
                }
            }
        }
        stage('Deploy and Push to ECR') {
            agent {
                label 'deploy'    // Runs on the Deploy agent
            }
            steps {
                script {
                    // sh 'curl -o jenkins-test-1.0.jar http://43.205.140.109:8081/artifactory/libs-release/com/example/jenkins-test/1.0/jenkins-test-1.0.jar'
                   
                    sh '''
                        aws ecr get-login-password --region ${AWS_DEFAULT_REGION} | docker login --username AWS --password-stdin 804480554088.dkr.ecr.${AWS_DEFAULT_REGION}.amazonaws.com
                        docker build -t sstest .
                        docker tag sstest:latest 804480554088.dkr.ecr.${AWS_DEFAULT_REGION}.amazonaws.com/sstest:latest
                        docker push 804480554088.dkr.ecr.${AWS_DEFAULT_REGION}.amazonaws.com/sstest:latest

                        # Update kubeconfig to interact with EKS
                        aws eks update-kubeconfig --region ap-south-1 --name cluster-eksctl
                        kubectl apply -f manifest.yaml
                        sleep 10
                        kubectl get pods -n ss-dev
                        kubectl get svc -n ss-dev
                    '''
                }
            }
        }
    }
}
